{
    "data" : [
        {
            "id": 1,
            "blogCategory": "Technical",
            "blogTitle" : "Build a chatbot with Amazon Lex and integrate with Slack",
            "slug": "build-a-chatbot-with-amazon-lex-and-integrate-with-slack",
            "postedOn": "April 11, 2020",
            "author": "Winnie",
            "blogImage": "1.jpg",
            "blogText": "<p><br/><br />Trong bài viết này, mình sẽ trình bày chi tiết các bước để bạn có thể bắt đầu tạo một con bot và liên kết nó như một app với workspace trong slack team mà bạn đang sử dụng.<br /><br />Trước hết chúng ta sẽ nói qua một chút về AWS và Amazon Lex. Amazon web services là một nền tảng điện toán đám mây phát triển toàn diện được cung cấp bởi Amazon.com. Dịch vụ Web đôi khi được gọi là dịch vụ đám mây hoặc các dịch vụ điện toán từ xa. Các dịch vụ AWS đầu tiên đã được đưa ra vào năm 2006 để cung cấp các dịch vụ trực tuyến cho các trang web và các ứng dụng phía máy khách. <br /> <br />Amazon Lex là dịch vụ xây dựng giao diện hội thoại trên bất cứ ứng dụng nào bằng giọng nói và văn bản được cung cấp bởi AWS. Amazon Lex đem lại các chức năng deep learning nâng cao của nhận dạng giọng nói tự động (ASR) cho việc chuyển đổi giọng nói thành văn bản cùng với chức năng hiểu ngôn ngữ tự nhiên (NLU) để hiểu ý của văn bản. Công nghệ deep learning sử dụng cho Amazon Alexa nay đã có mặt cho các nhà phát triển qua Amazon Lex, cho phép chúng ta xây dựng những ứng dụng chatbot hiệu quả và nhanh chóng. Một vài chức năng chính có thể tạo cho chatbot của bạn như bot tổng đài liên lạc, bot thông tin để lấy dữ liệu trả về thông tin cho người dùng, bot ứng dụng để tích hợp đặt vé, đặt đồ ăn, bot tăng hiệu suất doanh nghiệp giúp nhân viên kiểm tra dữ liệu, ...<br /> <br />Về mặt cơ bản, để có thể xây dựng một chatbot tích hợp vào slack trên Amazon Lex, chúng ta cần phải tạo được chatbot, sau đó tích hợp nó vào trong slack application. Chi tiết hơn, bạn có thể tham khảo các bước làm sau : <br /> <br />&nbsp&nbsp&nbsp&nbsp&nbsp1. Tạo chatbot thông qua Amazon Lex <br /> <br />Sau khi đăng nhập vào tài khoản aws, tìm kiếm và truy cập vào Amazon Lex trên AWS management console.  <br /> <br />Tiếp theo, sau khi vào được console của Amazon Lex, tại tab Bot, chọn Create để tạo một Bot mới. Sẽ có 2 lựa chọn được đưa ra cho chúng ta, đó là custom một chatbot mới, hoặc sử dụng ngay một sample mà AWS đã dựng sẵn. <br /> <br />Đương nhiên khi phát triển một chatbot phục vụ cho công việc, chúng ta sẽ lựa chọn Custom bot, tuy nhiên trong khuôn khổ bài viết này mình muốn nhấn mạnh về cách để tạo và tích hợp con Bot của chúng ta vào với slack, vì vậy chúng ta sẽ chọn sử dụng một sample đã có sẵn, chẳng hạn như ScheduleAppointment.  <br /> <br />Lưu ý khi tạo, tick No vào dòng COPPA sau đó create.  <br /> <br />Sau khi create, chúng ta có thể nhìn thấy console để edit cho ScheduleAppointment Bot mà AWS đã dựng sẵn. Bạn có thể tự do tùy chỉnh thêm các intents, hoặc thử chat với con bot vừa được tạo ở màn hình demo chat bên phải. <br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp2. Tạo một application trong slack <br /> <br />Đăng nhập vào tài khoản slack của bạn để truy nhập vào slack team, hoặc tạo một workspace để thoải mái truy cập đủ quyền hạn.  <br /> <br />Tiếp theo, để tạo một slack app mới, truy cập vào trang http://api.slack.com . Đặt tên cho app của bạn và lựa chọn workspace mà bạn muốn đưa slack app này vào.  <br /> <br />Sau khi tạo xong app mới, Slack sẽ đưa chúng ta về trang Basic Information. Tại đây bạn click vào Interactive Components để bật nó lên.  <br /> <br />Tại request URL, bạn có thể để tạm vào đó bất kỳ một URL nào có tồn tại, chúng ta sẽ update nó sau. Điền xong URL, ta sẽ Save Changes để lưu lại.  <br /> <br />&nbsp&nbsp&nbsp&nbsp&nbsp3. Tích hợp slack application với Amazon Lex Bot  <br /> <br />Quay trở lại Lex Bot console của bạn. Chọn tab channels và chọn channel là slack.  <br /> <br />Tên và mô tả cho chatbot, bạn có thể tự lựa chọn theo ý của mình.  <br /> <br />Tại dòng KMS Key, chọn aws/lex. Tiếp theo, lựa chọn Alias. Tại đây bạn bật sang tab setting, tạo 1 alias. Tên đặt tùy ý và ở cài đặt alias thì lựa chọn lastest version.  <br /> <br />Mở lại phần Basic Information trong app slack vừa tạo, copy các thông tin về Client ID, client secret và verification token.  <br /> <br />Quay trở lại phần channels, lựa chọn alias vừa tạo. Paste lại các thông tin vừa copy vào các trường thông tin tương ứng trong tab channels.  <br /> <br />Sau khi hoàn thành, chọn Activate. <br /> <br />Scroll down xuống dưới, bạn sẽ thấy Aws cung cấp cho chúng ta 2 đường link URL là Postback URL và OAuth URL.  <br /> <br />Quay lại trang api.slack, chọn OAuth & Permission, thêm vào 1 Redirect URL mới. Copy OAuth URL mà AWS cung cấp vào đây, chọn Add sau đó Save URL.  <br /> <br />Scroll down xuống dưới, trong mục Bot Token Scopes, chọn Add an OAuth scopes và add thêm 2 scopes là chat:write và team:read.  <br /> <br />Tiếp theo, chúng ta update Request URL link trong Interactive Components bằng Postback URL còn lại.  <br /> <br />Bước cuối cùng, chọn tab Event Subscription bên trái, bật chức năng này lên và copy Postback URL vừa rồi vào Request URL. Trong mục Subscribe to Bot Events, chọn Add Bot User Event và chọn message.im. <br /> <br />&nbsp&nbsp&nbsp&nbsp&nbsp4. Tải ứng dụng slack bạn vừa tạo ra vào workspace của bạn <br /> <br />Chọn Manage Distribution dưới phần setting ở api.slack, click vào add to slack.  <br /> <br />Đến đây, bạn đã hoàn thành các bước cài đặt để tích hợp một ứng dụng chatbot Amazone Lex vào slack. Bây giờ bạn hoàn toàn có thể thấy chatbot của mình trong application của slack team, hãy thử nhắn tin trực tiếp với chatbot của mình.</p>"
        },
        {
            "id" : 2,
            "blogCategory": "Technical",
            "blogTitle": "Serverless Application and Amazon Web Service",
            "slug": "serverless-application-and-amazon-web-service",
            "postedOn": "April 17, 2020",
            "author": "Winnie",
            "blogImage": "2.jpg",
            "blogText": "<h1>Serverless Application</h1>Serverless là môi trường, nền tảng thực thi ứng dụng và dịch vụ mà không phải quan tâm đến máy chủ. Ứng dụng serverless không cần phải  quan tâm việc phân bổ, quản lý tài nguyên của hệ điều hành, và bỏ qua các vấn đề về nâng cấp và bảo mật. Với khái niệm là chỉ cần tập trung phát triển sản phẩm, việc còn lại về vận hành sẽ để nền tảng này đảm nhiệm.<br/><br/>Điều quan trọng và khác biệt nhất trong serverless là bạn chỉ trả tiền khi và chỉ những phần bạn sử dụng. Giả sử bạn có một máy chủ ảo, thì thường sẽ được tính tiền trọn gói bao gồm thời gian chạy 24/7 trong 1 tháng, CPU và RAM, băng thông, lưu trữ. Bạn vẫn sẽ phải trả tiền hàng tháng đều đặn cho dù cái máy chủ ảo đó không chạy, hoặc chỉ sử dụng 5~10% công suất thì bạn vẫn phải trả trọn gói. Hiểu một cách nôm na, thì serverless như gói cước điện thoại được tính theo block giây, gọi bao nhiêu tính tiền bấy nhiêu, còn máy chủ ảo thường thì phải trả tiền thuê bao hàng tháng dù có phải sử dụng hay không. <br/><br/>Kiến trúc Serverless có bốn lợi ích chính. <br /> <br /><ul>&nbsp&nbsp&nbsp&nbsp&nbsp<li>Không cần quản lý máy chủ: Bạn sẽ không cần cung cấp hay duy trì bất kỳ máy chủ nào. Sẽ không cần phần mềm hoặc thời gian chạy để cài đặt, nâng cấp hoặc quản trị.</li>&nbsp&nbsp&nbsp&nbsp&nbsp<li>Thay đổi quy mô một cách linh hoạt: Ứng dụng của bạn sẽ có khả năng thay đổi quy mô tự động hoặc bằng cách điều chỉnh dung lượng thông qua việc chuyển đổi đơn vị sử dụng (ví dụ: thông lượng, bộ nhớ) thay vì với máy chủ độc lập thì sẽ phức tạp hơn.</li>&nbsp&nbsp&nbsp&nbsp&nbsp<li>Độ sẵn sàng cao: Ứng dụng serverless có độ sẵn sàng tích hợp và dung sai cao. Bạn sẽ không cần tạo kiến trúc cho các khả năng này do các dịch vụ chạy ứng dụng đã cung cấp cho ứng dụng theo mặc định. Ngoài ra, có để chọn trung tâm dữ liệu (một hoặc nhiều nơi) để triển khai sản phẩm một cách dễ dàng.</li>&nbsp&nbsp&nbsp&nbsp&nbsp<li>Tiết kiệm chi phí: chi phí gần như bằng 0 sau khi triển khai nếu bạn không có request nào (hoặc không có hành động gọi hàm), còn sử dụng bao nhiêu thì tính tiền bấy nhiêu.</li></ul><br /> <br />Serverless là một ý tưởng tuyệt vời nhưng không hoàn hảo, serverless có những vấn đề riêng mà bạn cũng phải suy nghĩ trước khi quyết định sử dụng:<ul>&nbsp&nbsp&nbsp&nbsp&nbsp<li>Độ trễ: Hiệu suất có thể là một vấn đề, chính bản thân mô hình này có thể gây ra độ trễ lớn hơn trong quá trình các nguồn tài nguyên điện toán phản ứng lại với lệnh của các ứng dụng. Nếu khách hàng yêu cầu hiệu suất cao thì việc sử dụng các máy chủ ảo được phân bổ sẽ là một lựa chọn ưu việt hơn.</li><li>&nbsp&nbsp&nbsp&nbsp&nbspGỡ lỗi (Debug): Công việc giám sát và gỡ lỗi của serverless computing cũng khá khó khăn. Việc bạn không sử dụng một nguồn tài nguyên máy chủ thống nhất làm cho cả hai hoạt động này gặp nhiều trở ngại. (Tin tốt là công cụ này sẽ dần được để cải thiện xử lý giám sát và gỡ lỗi tốt hơn trong môi trường không máy chủ.</li>&nbsp&nbsp&nbsp&nbsp&nbsp<li>Giới hạn về bộ nhớ, thời gian: các nhà cung cấp đều giới hạn tài nguyên ở các mức cố định về bộ nhớ và thời gian thực thi (timeout). Giả sử timeout tối đa là 5 phút, nếu bạn chạy quá 5 phút, quá trình thực thi sẽ bị ngắt. Về bộ nhớ, thì sẽ thiết lập mỗi mức khác nhau tuỳ nhà cung cấp, AWS có memory là 3008MB (sẽ được cấp CPU cao tương ứng), nếu ứng dụng yêu cầu bộ nhớ lớn thì sẽ không đáp ứng được. Liên quan đến vấn đề bộ nhớ này, thì cũng cần phải lưu tâm lúc lập trình nên tối ưu tốt, để tiết kiệm chi phí.</li>&nbsp&nbsp&nbsp&nbsp&nbsp<li>Phụ thuộc nhà cung cấp: bạn không thể muốn chạy phiên bản của phần mềm, nền tảng chính xác như bạn muốn. Ví dụ Nodejs bạn cần 10.x nhưng nhà cung cấp chỉ hỗ trợ đến 8.x, thì bạn sẽ không sử dụng được nền tảng này. Như vậy, trước khi sử dụng, bạn cần cân nhắc các nền tảng được hỗ trợ.</li>&nbsp&nbsp&nbsp&nbsp&nbsp<li>Chi phí ngầm: tuỳ nhà cung cấp có tính hay không, nhưng cơ bản là sẽ phát sinh chi phí lưu trữ mã nguồn, băng thông, và chi phí về lưu trữ dữ liệu (tuỳ ứng dụng có sử dụng hay không, ví dụ DynamoDB, RDMS … thì sẽ được tính riêng). Mặc dù, tuy không nhiều nhưng nếu không tối ưu, các phần chi phí ngầm sẽ còn cao hơn cả chi phí cho serverless.</li>&nbsp&nbsp&nbsp&nbsp&nbsp<li>Thời gian để nghiên cứu: trước đây bạn phải học cách sử dụng, quản lý máy chủ thì giờ đây bạn cũng cần thời gian để học để quản lý các tài nguyên trong serverless, mặc dù ko phải quá khó như quản lý máy chủ, nhưng cũng sẽ mất thời gian. Ví dụ bạn sẽ mất thời gian để hiểu về cách sử dụng CloudFormation, IAM policies, quản lý cấu hình về stage, region, memory của Functions…</li></ul>Hiện nay có rất nhiều nhà cung cấp dịch vụ giúp bạn tạo ra các functions sử dụng mô hình serverless một cách khá dễ dàng: Amazon Website Service, Google Cloud Function, Azure Functions,... Vì sự nổi trội về ưu điểm của serverless, nên hiện nay cũng đã có một số mã nguồn mở để xây dựng thành nền tảng cung cấp serverless, chẳng hạn như OpenFaaS – Serverless Functions Made Simple, FireCracker – Secure and fast microVMs for serverless computing.<br /> <br /><h1>Amazon Web Service</h1>Nói về thị phần cung cấp hạ tầng cloud hiện nay thì AWS vấn đang dẫn đầu và họ cũng đưa ra dịch vụ Lambda để người dùng có thể sử dụng và tạo ra các functions trên mô hình serverless. Khi kết hợp với các dịch vụ khác như API Gateway, S3,.. thì có thể tạo được một API server hay một hệ thống tự động xử lý khi có file upload lên S3. AWS Lambda hỗ trợ khá nhiều ngôn ngữ như Node.js, Java, C#, Python,…<br /> <br />Một trong những ví dụ cơ bản nhất cho ứng dụng để xây dựng serverless application đó chính là Amazon S3,  bởi vì bạn không phải lo lắng về việc quản lý các máy chủ khi xử lý dữ liệu. Amazon S3 là dịch vụ lưu trữ đối tượng được xây dựng để lưu trữ và truy xuất dữ liệu với khối lượng bất kỳ từ bất cứ nơi nào trên Internet. Đây là dịch vụ lưu trữ đơn giản cung cấp hạ tầng lưu trữ dữ liệu có độ bền cực cao, độ khả dụng cao và quy mô vô cùng linh hoạt với chi phí rất thấp.<br /> <br />S3 an toàn vì AWS cung cấp:<ul><li>&nbsp&nbsp&nbsp&nbsp&nbspMã hóa dữ liệu mà bạn lưu trữ. Nó có thể xảy ra theo 2 cách:<ul><li> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspMã hóa ở client side</li><li>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspMã hóa ở server side</li></ul><li>&nbsp&nbsp&nbsp&nbsp&nbspNhiều bản copy được duy trì để cho phespo phục hồi dữ liệu trong trường hợp dữ liệu bị hỏng</li><li>&nbsp&nbsp&nbsp&nbsp&nbspVersioning, trong đó mỗi bản chỉnh sửa đều được lưu trữ để sử dụng khi cần thiết.</li></ul><br /> <br />S3 bền vì:<ul><li>&nbsp&nbsp&nbsp&nbsp&nbspNó thường xuyên xác minh tính toàn vẹn của dữ liệu bằng cách sử dụng checksum: nếu s3 phát hiện có bất kì trục trặc dữ liệu nó sẽ sửa chữa ngay lập tức với sự trợ giúp của các dữ liệu được sao chép</li><li>&nbsp&nbsp&nbsp&nbsp&nbspNgay cả trong khi dữ liệu lưu trữ hoặc truy xuất dữ liệu, nó sẽ kiểm tra lưu lượng mạng đến cho bất kì gói dữ liệu bị hỏng nào.</li></ul><br /> <br />S3 có khả năng mở rộng cao vì nó tự động tăng dung lượng lưu trữ của bạn theo yêu cầu và bạn chỉ trả tiền cho bộ nhớ bạn sử dụng. <br /> <br />Để bắt đầu tìm hiểu và ứng dụng các dịch vụ AWS và serverless application, hãy thử sử dụng Amazon S3 để hosting cho một trang web tĩnh của bạn. Đó sẽ là một trải nghiệm tuyệt vời. "
        },
        {
            "id": 3,
            "blogCategory": "Technical",
            "blogTitle": "Chatbot và ứng dụng của chatbot",
            "slug": "chatbot-va-ung-dung-cua-chatbot",
            "postedOn": "March 08, 2020",
            "author": "Winnie",
            "blogImage": "3.jpg",
            "blogText": "<i>Ngày nay, các nền tảng nhắn tin ngày càng phát triền, chẳng hạn như sự bùng nổ của Facebook Messenger, Zalo, … , dẫn đến một xu thế phát triển mới hiện nay: Chatbot. Chúng được xem như một hiện tượng, một sự thay đổi lớn trong ngành truyền thông. Đặc biệt, sau khi Facebook mở rộng quyền truy cập vào các dịch vụ Messenger của mình, giúp cho doanh nghiệp có khả năng tiếp cận khách hàng tốt hơn thông qua các API khác nhau, đã khiến cho Chatbot thông dụng như bây giờ. Vậy thực chất Chatbot thực sự là gì và Chatbot làm được những gì?</i><br/><br/><h1>Chatbot là gì?</h1><br/>Chatbot một chương trình hay hệ thống có kết hợp với trí tuệ nhân tạo (AI), được xây dựng để tương tác với con người thông qua hình thức văn bản hoặc giọng nói.  Những tương tác đó có thể là những tương tác để giải quyết các vấn đề đơn giản như bot báo cáo thời tiết, đến những vấn đề phức tạp hơn như cách khắc phục sự cố với dịch vụ internet,… Bạn thậm chí  có thể yêu cầu những tin tức mới nhất thay vì duyệt chúng trên trình duyệt. Chatbot có thể tồn tại trong bất kỳ một ứng dụng trò chuyện lớn nào đó như Facebook Messenger, Slack, Telegram, … Một ý tưởng bao quát lên Chatbot đó là cuối cùng, Chatbot sẽ là một công cụ giúp chúng ta tìm thấy bất cứ thứ gì chúng ta đang tìm kiếm một cách dễ dàng mà không cần tìm kiếm trên Web hay mở nhiều ứng dụng.<br/><br/><h1>Ứng dụng của Chatbot</h1>Ứng dụng của Chatbot là vô tận, bạn có thể tạo một bot cho bất kỳ một hệ thống nào và nó sẽ giúp giảm bớt công việc và nâng cao hiệu suất của con người. Bằng cách nhìn cụ thể hơn, chúng ta có thể thấy được một vài ví dụ cụ thể về Chatbot như : <br/> <ul><li><h3>Trợ lý cá nhân (Personal Assitant):</h3>Sử dụng Chatbot như một trợ lý cá nhân ảo sẽ thay đổi cuộc sống của chúng ta một cách triệt để. Chúng có thể hoạt động để hỗ trợ chúng ta như một cố vấn tài chính, kiểm soát chi phí, kiểm tra thông tin tài khoản ngân hàng, … và hỗ trợ chúng ta quản lý tài chính hay cuộc sống một cách cá nhân hóa và an toàn. <br/><br/>Ngoài ra trong doanh nghiệp, trợ lý ảo sẽ có thể giúp cho doanh nghiệp vận hành hiệu quả và hỗ trợ được nhân viên và khách hàng tối ưu hơn. <br/><br/>Theo dự đoán của Gartner, người tiêu dùng sẽ có thể quản lý mối quan hệ của họ với các doanh nghiệp đến 85% mà không cần sự can thiệp của con người.<br/> </li><li><h3>Giới thiệu sản phẩm, bán hàng, đặt chỗ: </h3>Chatbot có thể được xây dựng tạo kịch bản để giới thiệu sản phẩm của doanh nghiệp, hỗ trợ quá trình bán hàng của các cửa hàng bán lẻ. <br/><br/> Sử dụng chatbot để giới thiệu sản phẩm mang lại hiệu quả cao hơn so với nhiều phương pháp marketing truyền thống khác. Chatbot chính là một xu thế mới trong chiến dịch quảng cáo, tiếp thị sản phẩm. Theo thống kê, tỉ lệ mở đọc tin nhắn trên chatbot nhiều hơn 80% so với tin nhắn marketing qua emails và tỉ lệ nhấp chuột vào quảng cáo (CRT) có thể cao gấp 10 lần.<br/><br/>Ngoài ra, các nhà hàng, đơn vị cung cấp dịch vụ có thể xây dựng chatbot trở thành một công cụ để order, đặt hàng hay đặt chỗ trước để nâng cao hiệu suất công việc.<br/> </li><li><h3>Chăm sóc khách hàng</h3>Mỗi một doanh nghiệp hay cửa hàng online đều cần có dịch vụ chăm sóc khách hàng. Nếu sử dụng phương pháp truyền thống, hiệu suất và khả năng chăm sóc khách hàng sẽ tốn rất nhiều chi phí nhân sự và khó đạt được độ chính xác cao. <br/><br/>Chatbot không chỉ giải quyết được vấn đề trên mà còn nâng cao được trải nghiệm và sự hài lòng của người dùng. Chatbot có thể cung cấp dịch vụ chăm sóc khách hàng tức thời, có thể phản hồi 24/7. <br/> </li><li><h3>Thanh toán trực tuyến</h3>Chức năng này đang được sử dụng cho nền tảng Facebook Messenger phiên bản thử nghiệm tại Mỹ.<br/><br/>Vào thập kỷ trước, khi muốn mua hàng, chúng ta phải rời khỏi nhà. Sau đó cách đây vài năm, với sự phát triển bùng nổ của e-commercal, chỉ cần ngồi ở nhà cũng có thể mua được hàng, chúng ta thấy được sự tiện lợi tuyệt vời của điều đó. Tương tự như vậy, ngay sau khi được tư vấn mua hàng qua chatbot, việc có thể mua hàng ngay ngay lập tức mà không phải thoát ra khỏi ứng dụng tin nhắn đã mang lại rất nhiều tiện ích. <br/><br/>Đối với người mua hàng, việc mua hàng được thực hiện nhanh chóng và đơn giản hơn, tiết kiệm được thời gian phải đăng nhập hoặc truy cập lại thông tin để mua hàng, tìm kiếm lại sản phẩm đã được tư vấn,… Đối với nhà bán hàng, họ có thể tăng được phần trăm thành công cho đơn hàng hơn, giữ được sự hứng thú của khách hàng đối với sản phẩm. <br/> </li><li><h3>Đưa ra kết quả tìm kiếm, cập nhật tin tức</h3>Các doanh nghiệp, trang báo,… có thể thiết kế những bot thông tin để cung cấp thông tin thường xuyên cho người dùng, thông tin được update thường xuyên giúp người dùng không cần phải tìm hiểu trên trình duyệt, đồng thời giúp doanh nghiệp đưa thông tin mới của mình đến với khách hàng một cách nhanh chóng và hiệu quả nhất."
        },
        {
            "id": 4,
            "blogCategory": "Technical",
            "blogTitle": "Vì sao nên sử dụng chatbot",
            "slug": "vi-sao-nen-su-dung-chatbot",
            "postedOn": "march 05, 2020",
            "author": "Winnie",
            "blogImage": "4.jpg",
            "blogText": "<b><i>Chatbot là một cơ hội lớn trong thời đại công nghệ mới </b></i><br><br>Hiện nay, sự phát triển của các ứng dụng tin nhắn đang là xu thế. Vào quý 1 năm 2012, tổng số lượng người dùng của các ứng dụng tin nhắn lớn như WhatsApp, FB Messenger, Wechat, Line,… chỉ dưới 100 triệu người dùng. Sau hơn 3 năm, vào quý 3 năm 2015, số lượng người dùng chỉ tính riêng WhatsApp hay Facebook Messenger đã lên tới khoảng 800 –900 triệu người dùng.<br><br>Và vào cuối năm ngoái, con số này đã tăng lên 1.5 tỷ người dùng cho WhatsApp và 1.3 tỷ người dùng cho Facebook Messenger (Theo Statista). Tốc độ tăng trưởng mạnh mẽ này khiến cho số lượng người dùng của các ứng dụng tin nhắn đã sớm vượt qua người dùng các trang mạng xã hội vào đầu năm 2015. <br><br>Một vài nghiên cứu đã chỉ ra rằng người dùng sử dụng điện thoại của mình chủ yếu vào một vài ứng dụng thực sự yêu thích, ví dụ như trình duyệt, mạng xã hội, ứng dụng trò chuyện và một vài trò chơi. Từ đó, phát triển chatbot trở thành xu hướng và như là một con đường mới của tương lai đối với các nhà phát triển ứng dụng. Đối với người dùng, chatbot là miễn phí. Đối với doanh nghiệp, chatbot là công cụ bán hàng, công cụ marketing hiệu quả và tối ưu. Ngoài ra, với sự phát triển mạnh mẽ của Trí tuệ nhân tạo (AI) và lập trình ngôn ngữ tự nhiên (NLP), sự phát triển của Chatbot là chưa có giới hạn.<h1>Tại sao ứng dụng chatbot</h1><h3>Tiết kiệm thời gian và chi phí</h3>Một trong những tiện ích tuyệt vời của việc sử dụng Chatbot cho doanh nghiệp đó là tiết kiệm thời gian. Ví dụ, đối với một bot chăm sóc khách hàng trên website của doanh nghiệp, nó có thể cung cấp câu trả lời một cách nhanh chóng, tự động đối với các câu hỏi hay các kịch bản đã được lập trình từ trước. Điều này giúp cho khách hàng hay người dùng không phải chờ đợi suốt một ngày dài để nhận được phản hồi như trong việc sử dụng nhân sự truyền thống trước đây. <br><br>Sử dụng chatbot rẻ hơn so với nhân sự truyền thống. Có thể chi phí của việc xây dựng và phát triển một hệ thống chatbot phức tạp ban đầu là khá lớn, tuy nhiên chúng ta sẽ có thể có được một hệ thống chính xác, chuyên nghiệp trong một thời gian dài, đồng thời không cần phải chi một khoản lớn cho các ngày nghỉ phép, bệnh tật hay các bảo hiểm, đóng góp xã hội…<br><br>Từ đó, chatbot cho phép hệ thống phục vụ và phản hồi cho số lượng người dùng lớn hơn, năng suất cao hơn mà chi phí lại giảm đi.<br><h3>Nâng cao điểm CSAT </h3>CSAT là viết tắt của cụm từ tiếng Anh “Customer Satisfaction Score“ - Chỉ số đánh giá sự hài lòng của khách hàng, là con số nói lên việc phục vụ khách hàng có tốt hay không. Vì sao Chatbot lại có thể nâng cao con số này? Bởi vì Chatbot có thể làm việc nhiều ngày mà không cần nghỉ ngời, hay nói cách khác là luôn có sẵn. <br><br>Chẳng hạn, với mua hàng online, khách hàng thường mua sắm vào thời điểm buổi tối ( sau khi tan ca, rảnh rồi ), tuy nhiên vào thời điểm đó, nhân viên tư vấn của bạn không còn hoạt động và không thể phản hồi. Những khách hàng không được trả lời hay giải đáp nhanh có thể sẽ thất vọng, rời khỏi trang web của bạn và không bao giờ quay lại. Tuy nhiên, nếu sử dụng Chatbot, khách hàng của bạn vẫn có thể nhận được câu trả lời mà họ cần ngay lập tức, và giúp cho bạn giữ được khách hàng của mình.<br><h3>Mở rộng quy mô kinh doanh phát triển hiệu quả</h3>Sự gia tăng và mức độ phổ biến của các ứng dụng nhắn tin giúp cho doanh nghiệp có thể tiếp cận nhiều khách hàng hơn nữa. Không những vậy, bằng những dữ liệu mà chatbot có thể thu thập được từ khách hàng, hệ thống phát triển có thể vận dụng các dữ liệu đó để xây dựng những chiến lược marketing mới hiệu quả và tối ưu hơn."
        },
        {
            "id": 5,
            "blogCategory": "Fashion",
            "blogTitle": "Tổng quan về WIREFRAMES, MOCKUPS và PROTOTYPE",
            "slug": "tong-quan-ve-wireframe-mockup-va-prototype",
            "postedOn": "March 28, 2020",
            "author": "Winnie",
            "blogImage": "5.jpg",
            "blogText": "Xu hướng chung trong quá trình thiết kế UI/UX cho một sản phẩm là thực hiện ba giai đoạn: wireframe, mockup và prototype. Mục tiêu của mỗi bước là để cho phép bạn sửa chữa các vấn đề về khả năng sử dụng của sản phẩm trong khi chi phí sửa chữa vẫn còn nhỏ.<br><br>Trước tiên tôi sẽ làm rõ một số định nghĩa và thuật ngữ<h1>Wireframe</h1><h3>1.Wireframe là gì?</h3>Wireframe được ví như xương sống của một thiết kế, nó chứa tất cả các phần quan trọng của sản phẩm cuối cùng. Nó là một dạng hình dung nguyên sơ nhất về sản phẩm. Thông thường wireframe sử dụng các yếu tố đồ hoạ đơn giản, như đường thẳng, hình hộp, hình học cơ bản với tông màu xám, đen, trắng để biểu thị thông tin về kiến trúc, nội dung hay bố cục.<br><br>Wireframes là một bước tuyệt vời trong giai đoạn đầu của dự án.Bạn có thể nhanh chóng kiểm tra chiến lược sáng tạo tổng thể của bạn và giả thuyết khả năng sử dụng mà không bị sa lầy trong các chi tiết của thiết kế. Một wireframe cũng có thể cung cấp cho khách hàng một cái nhìn tổng quan về cách điều hướng và sử dụng. Các nhà phát triển có được một cái nhìn tổng quan các yếu tố được sắp xếp và ý đồ của nhà thiết kế. Copywriter có được một cảm giác về khối lượng nội dung và không gian mà họ phải đối phó. Wireframes là một điểm khởi đầu tuyệt vời cho bất kỳ quá trình thiết kế tương tác. Ở cấp độ này, dù có sự thay đổi lớn cũng không tạo ra vấn đề gì to tát. Bạn có thể di chuyển nội dung xung quanh hoặc nhóm với nhau, thêm hoặc loại bỏ các yếu tố, tương đối dễ dàng so với các giai đoạn sau của thiết kế.<h3>2.Khi nào nên sử dụng wireframe?</h3>Wireframe thường được sử dụng như tài liệu của dự án, bắt đầu phác thảo dự án. Hoặc cũng có thể được sử dụng một cách không chính thức trong quá trình phát triển dự án như một công cụ giải thích, tương tác cho các thành viên trong đội.<br><br><h1>Mockup</h1><h3>1.Mockup là gì?</h3>Mockup là cấp độ tiếp theo từ Wireframe, là giai đoạn giữa và là cấu nối giữa cấu trúc ( wireframe) tới một bản mẫu. Đây là nơi các nhà thiết kế có thể sử dụng các yếu tố đồ hoạ sáng tạo.Các khối hình học cơ bản, tông màu nhạt nhẽo được thay thế bằng các yếu tố đồ hoạ tinh tế. Mock-up sử dụng wireframes và mang lại cho nó nhiều giá trị hơn phù hợp với bản sắc của thương hiệu.<br><br>Mockup không chỉ là một phiên bản màu của wireframe . Nó là sự tái diễn của các ngôn ngữ hình ảnh thương hiệu.<br><br>Mock-up rất gần với phiên bản cuối cùng về tính thẩm mỹ và cái nhìn của một sản phẩm kỹ thuật số nhưng thiếu chức năng. Một mockup đẹp có thể tạo hứng thú với khách hàng và nhà đầu tư. Tuy nhiên, càng nhiều càng mock-up là càng phải giải quyết nhiều câu hỏi về sự tương tác hoặc cách thiết kế đó hiển thị trên nhiều thiết bị.<h3>2.Khi nào nên sử dụng Mockup?</h3>Mockup đặc biệt hữu dụng khi bạn muốn trình bày về sản phẩm với các nhà đầu tư hoặc các bên liên quan. Nhờ bản chất hấp dẫn về mặt thị giác ( giao diện đẹp ) sẽ thu về một phản hồi tốt, và nếu đặt trong bối cảnh toàn cục của thiết kế cho sản phẩm, nó có thể là một thành phần lớn và quan trọng của tài liệu dự án.<h1>Prototype</h1> <h3>1.Prototype là gì?</h3>Prototype thường bị nhầm lẫn với wireframe, là nằm trong phân đoạn từ giữa tới cao về sự chân thật của sản phẩm cuối cùng,mô phỏng tác động giao diện người dùng. Nó sẽ cho phép người sử dụng để:<ul><li>Trải nghiệm nội dung và tương tác với giao diện</li><li>Kiểm tra sự tương tác chính một cách tương tự như sản phẩm cuối cùng</li></ul>Thông thường prototype là ở giai đoạn cuối cùng của thiết kế và đóng vai trò là cầu nối để tới sản phẩm thực tế. Một quá trình phổ biến là nhanh chóng bắt đầu với một prototype có độ chân thật thấp như thực hành của Apple với thiết kế của nhiều nguyên mẫu đầu, và sau đó dần dần lặp lại vào ngày càng nhiều các phiên bản hi-fi. Đây thực sự là phương pháp nền tảng cho việc lấy người dùng làm trung tâm và thiết kế định hướng khách hàng. Một bản mẫu cuối cùng có thể không có mọi tương tác và hiệu ứng, nhưng nó sẽ có tác động quan trọng, cung cấp một sự hiểu biết rõ ràng về sản phẩm cuối cùng sẽ hoạt động như thế nào. Vì vậy, nói cách khác, một bản mẫu làm việc tốt sẽ giống như sản phẩm cuối cùng càng gần càng tốt.<h3>2.Khi nào nên sử dụng Prototype?</h3>Prototype được sử dụng với đầy đủ tính năng sẽ rất tiềm năng trong việc thử nghiệm người dùng. Một mô phỏng như vậy của các tương tác chính thức hình thành chất liệu tuyệt vời để kiểm tra khả năng sử dụng của giao diện, trước khi bắt đầu phát triển sản phẩm chính thức.<br><br>Hãy coi chừng quá trình tạo prototype vì nó là một hình thức đắt tiền và tốn thời gian. <h3>3.Các công cụ tạo Prototype</h3><ul><li>Axure</li><li>Invision</li><li> UXPin</li><li>Webflow</li></ul>"
            
        }
    ]
}